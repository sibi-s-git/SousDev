{
  "chunks": [
    {
      "id": "README.md_0",
      "file_path": "README.md",
      "chunk_id": 0,
      "text": "# MedohTool\n\nA web application simulating sending texts to patients, validating phone numbers using area codes, and storing sent text history.\n\n## Prerequisites\n\n1. Install Docker Desktop (https://www.docker.com/products/docker-desktop/)\n\n## Running the Application\n\n1. Open a terminal in the project directory\n\n2. Run the following command to start:\n\ndocker compose up\n\n3. Run the following command to close:\n\ndocker compose down\n\nThe application will be available at:\n- Frontend: http://localhost:3000\n- Backend API: http://localhost:5001\n\n",
      "start_token": 0,
      "end_token": 118,
      "token_count": 118
    },
    {
      "id": "docker-compose.yml_0",
      "file_path": "docker-compose.yml",
      "chunk_id": 0,
      "text": "version: '3.8'\n\nservices:\n  backend:\n    build: ./backend\n    ports:\n      - \"5001:5001\"\n    volumes:\n      - ./backend:/app\n    environment:\n      - SUPABASE_KEY=${SUPABASE_KEY}\n    restart: unless-stopped\n\n  frontend:\n    build: ./client\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./client:/app\n      - /app/node_modules\n    environment:\n      - WATCHPACK_POLLING=true\n    depends_on:\n      - backend\n    restart: unless-stopped ",
      "start_token": 0,
      "end_token": 126,
      "token_count": 126
    },
    {
      "id": "backend/requirements.txt_0",
      "file_path": "backend/requirements.txt",
      "chunk_id": 0,
      "text": "Flask==2.0.1\nWerkzeug==2.0.3\nsupabase==0.7.1\npython-dotenv==0.19.0\nrequests==2.26.0\nflask-cors==3.0.10 ",
      "start_token": 0,
      "end_token": 58,
      "token_count": 58
    },
    {
      "id": "backend/valid_area_codes.txt_0",
      "file_path": "backend/valid_area_codes.txt",
      "chunk_id": 0,
      "text": "201,202,203,205,206,207,208,209,210,212,213,214,215,216,217,218,219,225,228,229,231,234,239,240,248,251,252,253,254,256,260,262,267,269,270,276,281,301,302,303,304,305,307,308,309,310,312,313,314,315,316,317,318,319,320,321,323,325,330,331,334,336,337,347,351,352,360,361,386,401,402,404,405,406,407,408,409,410,412,413,414,415,417,419,423,425,432,434,435,440,443,469,478,479,480,501,502,503,504,505,507,508,509,510,512,513,515,516,517,518,520,530,540,541,551,559,561,562,563,570,571,573,574,580,585,586,601,602,603,605,606,607,608,609,610,612,614,615,616,617,618,619,620,623,626,630,631,636,641,646,650,651,660,661,662,678,682,701,702,703,704,706,707,708,712,713,714,715,716,717,718,719,720,724,727,731,732,734,740,754,757,760,763,765,770,772,773,774,775,781,785,786,801,802,803,804,805,806,808,810,812,813,814,815,816,817,818,828,830,831,832,843,845,847,848,850,856,857,858,859,860,862,863,864,865,870,901,903,904,906,907,908,909,910,912,913,914,915,916,917,918,919,920,925,928,931,936,937,940,941,947,949,951,952,954,956,970,971,972,973,978,979,980,985,989 ",
      "start_token": 0,
      "end_token": 530,
      "token_count": 530
    },
    {
      "id": "backend/app.py_0",
      "file_path": "backend/app.py",
      "chunk_id": 0,
      "text": "from flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom supabase import create_client, Client\nimport os\nimport re\nfrom datetime import datetime\n\n# Load valid area codes\ndef load_valid_area_codes():\n    with open('valid_area_codes.txt', 'r') as f:\n        area_codes = f.read().strip().split(',')\n    return set(area_codes)\n\nVALID_AREA_CODES = load_valid_area_codes()\n\napp = Flask(__name__)\n# Enable CORS for all routes\nCORS(app, resources={\n    r\"/*\": {\n        \"origins\": [\"http://localhost:3000\"],\n        \"methods\": [\"GET\", \"POST\", \"OPTIONS\"],\n        \"allow_headers\": [\"Content-Type\"],\n        \"supports_credentials\": True\n    }\n})\n\n# Initialize Supabase client\nSUPABASE_URL = \"https://ppcfxvjnxbwwxgigypzb.supabase.co\"\nSUPABASE_KEY = os.getenv('SUPABASE_KEY')\n\nprint(\"Supabase URL:\", SUPABASE_URL)\nprint(\"Supabase Key exists:\", bool(SUPABASE_KEY))\n\n# Ensure environment variables are set\nif not SUPABASE_URL or not SUPABASE_KEY:\n    raise ValueError(\"Missing required environment variables SUPABASE_URL or SUPABASE_KEY\")\n\ntry:\n    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)\n    print(\"Supabase client created successfully\")\nexcept Exception as e:\n    print(\"Error creating Supabase client:\", str(e))\n    raise\n\ndef format_phone_number(phone):\n    # Remove all non-numeric characters\n    numbers_only = re.sub(r'\\D', '', phone)\n    \n    # Format the number with proper formatting\n    if len(numbers_only) == 10:\n        area_code = numbers_only[0:3]\n        # Check if area code is valid\n        if area_code not in VALID_AREA_CODES:\n            print(f\"Invalid area code: {area_code}\")\n            return None\n        prefix = numbers_only[3:6]\n        line_number = numbers_only[6:]\n        return f\"({area_code})-{prefix}-{line_number}\"\n    return None\n\ndef generate_unique_link(doctor_name, phone_number, message_id):\n    # Use the UUID automatically created by Supabase as the reference\n    safe_doctor_name = doctor_name.strip().replace(' ', '-').lower()\n    return f\"/visit/{safe_doctor_name}?ref={message_id}\"\n\n@app.route('/send', methods=['POST'])\ndef send_bulk_messages():\n    try:\n        print(\"\\n=== New Request ===\")\n        print(\"Headers:\", dict(request.headers))\n        data = request.json\n        print(\"Request data:\", data)\n        \n        numbers = data.get('numbers', [])\n        doctor_name = data.get('doctorName', '')\n        \n        print(f\"Processing: Doctor: {doctor_name}, Numbers: {numbers}\")\n        \n        processed_data = []\n        invalid_numbers = []\n        \n        for number in numbers:\n            print(f\"Processing number: {number}\", end=\" -> \")\n            formatted_number = format_phone_number(number)\n            print(formatted_number)\n            \n            if not formatted_number:\n                # Extract area code for error message\n                area_code = re.sub(r'\\D', '', number)[:3]\n                invalid_numbers.append(area_code)\n                continue\n                \n            # Check for existing entry\n            existing_data = supabase.table('messages_sent').select(\"*\").eq('phone_number', formatted_number).execute()\n            print(\"Existing data:\", existing_data.data)\n            \n            if existing_data.data:\n                # Update existing entry\n                entry = existing_data.data[0]\n                # Generate link using existing ID\n                message_link = generate_unique_link(doctor_name, formatted_number, entry['id'])\n                response = supabase.table('messages_sent').update({\n                    'sent_count': entry['sent_count'] + 1,\n                    'last_sent_at': datetime.utcnow().isoformat(),\n                    'link': message_link\n                }).eq('id', entry['id']).execute()\n            else:\n                # Create entry\n                initial_response = supabase.table('messages_sent').insert({\n                    'doctor_name': doctor_name,\n                    'phone_number': formatted_number,\n                    'sent_count': 1,\n                    'last_sent_at': datetime.utcnow().isoformat()\n                }).execute()\n                \n                if initial_response.data:\n                    # Update with link\n                    entry_id = initial_response.data[0]['id']\n                    message_link = generate_unique_link(doctor_name, formatted_number, entry_id)\n                    response = supabase.table('messages_sent').update({\n                        'link': message_link\n                    }).eq('id', entry_id).execute()\n                else:\n                    response = initial_response\n            \n            print(\"Supabase response:\", response)\n            if response.data:\n               ",
      "start_token": 0,
      "end_token": 1000,
      "token_count": 1000
    },
    {
      "id": "backend/app.py_1",
      "file_path": "backend/app.py",
      "chunk_id": 1,
      "text": " entry['sent_count'] + 1,\n                    'last_sent_at': datetime.utcnow().isoformat(),\n                    'link': message_link\n                }).eq('id', entry['id']).execute()\n            else:\n                # Create entry\n                initial_response = supabase.table('messages_sent').insert({\n                    'doctor_name': doctor_name,\n                    'phone_number': formatted_number,\n                    'sent_count': 1,\n                    'last_sent_at': datetime.utcnow().isoformat()\n                }).execute()\n                \n                if initial_response.data:\n                    # Update with link\n                    entry_id = initial_response.data[0]['id']\n                    message_link = generate_unique_link(doctor_name, formatted_number, entry_id)\n                    response = supabase.table('messages_sent').update({\n                        'link': message_link\n                    }).eq('id', entry_id).execute()\n                else:\n                    response = initial_response\n            \n            print(\"Supabase response:\", response)\n            if response.data:\n                processed_data.extend(response.data)\n        \n        if invalid_numbers:\n            message = f\"Invalid area code(s): {', '.join(invalid_numbers)}. \"\n            if processed_data:\n                message += f\"Successfully processed {len(processed_data)} other messages.\"\n        else:\n            message = f\"Successfully processed {len(processed_data)} messages\"\n            \n        print(\"Sending response:\", {\n            'success': True,\n            'message': message,\n            'data': processed_data\n        })\n        \n        return jsonify({\n            'success': True,\n            'message': message,\n            'data': processed_data\n        })\n            \n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        return jsonify({\n            'success': False,\n            'message': str(e)\n        }), 500\n\n@app.route('/get-messages', methods=['GET'])\ndef get_messages():\n    try:\n        print(\"\\n=== Fetching Messages ===\")\n        response = supabase.table('messages_sent').select(\"*\").execute()\n        messages = response.data\n        print(\"Messages retrieved:\", messages)\n        return jsonify(messages)\n    except Exception as e:\n        print(\"Error fetching messages:\", e)\n        return jsonify({\n            'success': False,\n            'message': str(e)\n        }), 500\n\n#Testing purposes\n@app.route('/delete-all', methods=['POST'])\ndef delete_all():\n    try:\n        get_response = supabase.table('messages_sent').select('id').execute()\n        if get_response.data:\n            for record in get_response.data:\n                supabase.table('messages_sent').delete().eq('id', record['id']).execute()\n        return jsonify({\n            'success': True,\n            'message': 'All messages deleted successfully'\n        })\n    except Exception as e:\n        return jsonify({\n            'success': False,\n            'message': str(e)\n        }), 500\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=5001) ",
      "start_token": 800,
      "end_token": 1418,
      "token_count": 618
    },
    {
      "id": "client/package.json_0",
      "file_path": "client/package.json",
      "chunk_id": 0,
      "text": "{\n  \"name\": \"client\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/dom\": \"^10.4.0\",\n    \"@testing-library/jest-dom\": \"^6.6.3\",\n    \"@testing-library/react\": \"^16.3.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"react\": \"^19.1.0\",\n    \"react-dom\": \"^19.1.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n",
      "start_token": 0,
      "end_token": 272,
      "token_count": 272
    },
    {
      "id": "client/public/index.html_0",
      "file_path": "client/public/index.html",
      "chunk_id": 0,
      "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n",
      "start_token": 0,
      "end_token": 425,
      "token_count": 425
    },
    {
      "id": "client/public/manifest.json_0",
      "file_path": "client/public/manifest.json",
      "chunk_id": 0,
      "text": "{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n",
      "start_token": 0,
      "end_token": 162,
      "token_count": 162
    },
    {
      "id": "client/public/robots.txt_0",
      "file_path": "client/public/robots.txt",
      "chunk_id": 0,
      "text": "# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n",
      "start_token": 0,
      "end_token": 20,
      "token_count": 20
    },
    {
      "id": "client/src/reportWebVitals.js_0",
      "file_path": "client/src/reportWebVitals.js",
      "chunk_id": 0,
      "text": "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
      "start_token": 0,
      "end_token": 116,
      "token_count": 116
    },
    {
      "id": "client/src/App.css_0",
      "file_path": "client/src/App.css",
      "chunk_id": 0,
      "text": ".App {\n  text-align: center;\n  padding: 20px;\n}\n\n.container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  color: #333;\n  margin-bottom: 30px;\n}\n\n.form-group {\n  margin-bottom: 20px;\n  text-align: left;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: bold;\n  color: #555;\n}\n\ntextarea, .text-input {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\ntextarea {\n  resize: vertical;\n}\n\n.text-input {\n  height: 40px;\n}\n\nbutton {\n  background-color: #4CAF50;\n  color: white;\n  padding: 12px 20px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin: 10px;\n  font-size: 16px;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\n.status {\n  margin-top: 20px;\n  padding: 10px;\n  border-radius: 4px;\n  background-color: #e8f5e9;\n  color: #2e7d32;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin-bottom: 30px;\n}\n\ninput {\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 16px;\n}\n\nbutton {\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: background-color 0.2s;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.status {\n  margin-top: 15px;\n  padding: 10px;\n  border-radius: 4px;\n  background-color: #e9ecef;\n  color: #333;\n}\n\n.message-history {\n  margin-top: 40px;\n  padding: 20px;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.message-history h2 {\n  color: #333;\n  margin-bottom: 20px;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\nth, td {\n  padding: 12px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\nth {\n  background-color: #f8f9fa;\n  font-weight: bold;\n}\n\ntr:hover {\n  background-color: #f8f9fa;\n}\n\ntd a {\n  color: #007bff;\n  text-decoration: none;\n}\n\ntd a:hover {\n  text-decoration: underline;\n}\n",
      "start_token": 0,
      "end_token": 877,
      "token_count": 877
    },
    {
      "id": "client/src/index.js_0",
      "file_path": "client/src/index.js",
      "chunk_id": 0,
      "text": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",
      "start_token": 0,
      "end_token": 124,
      "token_count": 124
    },
    {
      "id": "client/src/index.css_0",
      "file_path": "client/src/index.css",
      "chunk_id": 0,
      "text": "body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n",
      "start_token": 0,
      "end_token": 110,
      "token_count": 110
    },
    {
      "id": "client/src/App.test.js_0",
      "file_path": "client/src/App.test.js",
      "chunk_id": 0,
      "text": "import { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n",
      "start_token": 0,
      "end_token": 54,
      "token_count": 54
    },
    {
      "id": "client/src/setupTests.js_0",
      "file_path": "client/src/setupTests.js",
      "chunk_id": 0,
      "text": "// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n",
      "start_token": 0,
      "end_token": 55,
      "token_count": 55
    },
    {
      "id": "client/src/App.js_0",
      "file_path": "client/src/App.js",
      "chunk_id": 0,
      "text": "import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [doctorName, setDoctorName] = useState('');\n  const [status, setStatus] = useState('');\n\n  const formatPhoneNumber = (input) => {\n    const numbers = input.replace(/\\D/g, '');\n    \n    if (numbers.length <= 3) {\n      return numbers;\n    } else if (numbers.length <= 6) {\n      return `(${numbers.slice(0, 3)})${numbers.length > 3 ? '-' + numbers.slice(3) : ''}`;\n    } else {\n      return `(${numbers.slice(0, 3)})-${numbers.slice(3, 6)}-${numbers.slice(6, 10)}`;\n    }\n  };\n\n  const handlePhoneNumberChange = (e) => {\n    const input = e.target.value;\n    setPhoneNumber(formatPhoneNumber(input));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!doctorName.trim()) {\n      setStatus('Please enter the doctor\\'s name');\n      return;\n    }\n\n    if (!phoneNumber.trim()) {\n      setStatus('Please enter a phone number');\n      return;\n    }\n    \n    const phoneRegex = /^\\(\\d{3}\\)-\\d{3}-\\d{4}$/;\n    if (!phoneRegex.test(phoneNumber)) {\n      setStatus('Please enter a valid phone number in format (XXX)-XXX-XXXX');\n      return;\n    }\n\n    const requestData = {\n      numbers: [phoneNumber],\n      doctorName: doctorName\n    };\n\n    try {\n      const response = await fetch('http://localhost:5001/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestData),\n      });\n\n      const data = await response.json();\n\n      if (data.success && data.data.length > 0) {\n        const messageLink = data.data[0].link;\n        setStatus(`Message sent successfully!\\nLink: ${messageLink}`);\n      } else {\n        // Display the message from the backend which includes invalid area code info\n        setStatus(data.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setStatus('Network error. Please try again.');\n    }\n  };\n\n  const downloadCSV = async () => {\n    try {\n      const response = await fetch('http://localhost:5001/get-messages');\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n      \n      const data = await response.json();\n      \n      const csvContent = [\n        ['Doctor Name', 'Phone Number', 'Sent Count', 'Last Sent At', 'Time', 'Link'],\n        ...data.map(row => {\n          const date = new Date(row.last_sent_at);\n          return [\n            row.doctor_name,\n            row.phone_number,\n            row.sent_count,\n            date.toLocaleDateString(),\n            date.toLocaleTimeString(),\n            row.link || ''\n          ];\n        })\n      ].map(row => row.join(',')).join('\\n');\n\n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'messages_sent_details.csv';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('CSV download error:', error);\n      setStatus('Error downloading CSV. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>Doctor Message System</h1>\n        \n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label>Doctor's Name:</label>\n            <input\n              type=\"text\"\n              value={doctorName}\n              onChange={(e) => setDoctorName(e.target.value)}\n              placeholder=\"Enter doctor's name\"\n              className=\"text-input\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label>Phone Number:</label>\n            <input\n              type=\"text\"\n              value={phoneNumber}\n              onChange={handlePhoneNumberChange}\n              placeholder=\"(123)-456-7890\"\n              className=\"text-input\"\n              maxLength={14}\n            />\n          </div>\n\n          <button type=\"submit\">Send Message</button>\n          <button type=\"button\" onClick={downloadCSV}>\n            Download Messages History\n          </button>\n\n          {status && <div className=\"status\" style={{ whiteSpace: 'pre-line' }}>{status}</div>}\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",
      "start_token": 0,
      "end_token": 995,
      "token_count": 995
    }
  ],
  "total_chunks": 17,
  "embedding_dimension": 1536,
  "project_path": "/Users/sibi/Documents/MedohTool",
  "project_name": "MedohTool"
}